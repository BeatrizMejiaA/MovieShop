# Welcome to Serverless!
#
# This file is the main config file for your service.
# It's very minimal at this point and uses default values.
# You can always add more config options for more control.
# We've included some commented out config examples here.
# Just uncomment any of them to get that config option.
#
# For full config options, check the docs:
#    docs.serverless.com
#
# Happy Coding!

service: movieshop-merchant-api

provider:
  apiGateway:
    shouldStartNameWithService: true
  name: aws
  runtime: nodejs16.x
  stage: movieshop-nl-dev
  region: eu-central-1
  environment:
    CB_DYNAMO_DB_MERCHANTS: ${ssm:${self:custom.stage}-movieshop-merchants}
    CB_STAGE: ${opt:stage, self:provider.stage}
    CB_SERVICE: ${self:service}
    EMAIL: ${ssm:${self:custom.stage}-email-sender}
    CB_JWT_SECRET: ${ssm:${self:custom.stage}-jwt-secret}
    CB_TEMPLATE_EMAIL_AS: ${ssm:${self:custom.stage}-template-email-change-password}
    CB_TEMPLATE_EMAIL_NS: ${ssm:${self:custom.stage}-template-email-new-password}

custom:
    allowed-headers:
      - Content-Type
      - X-Amz-Date
      - Authorization
      - X-Api-Key
      - X-Amz-Security-Token
      - X-Amz-User-Agent
      - X-Cowabunga
    stage: ${opt:stage, self:provider.stage}
    region: ${opt:region, self:provider.region}
package:
  patterns:
    - 'node_modules/**'

functions:

  create_merchant:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/create.create
    layers:
      - arn:aws:lambda:sa-east-1:637423312381:layer:movieshop-libutils:1
    events:
      - http:
          path: merchants
          method: post
          cors: true

  get_merchant:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/get.get
    events:
      - http:
          path: merchants/{id}
          method: get
          cors: true

  changepw_merchant:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/changepw.changepw
    events:
      - http:
          path: merchants/change/password
          method: post
          authorizer: authorizer
          cors: true

  add_iq:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/add.add
    events:
      - http:
          path: merchants/iq
          method: post
          authorizer: authorizer
          cors: false

  set_mode:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/setmode.setmode
    events:
      - http:
          path: merchants/iq/mode
          method: post
          authorizer: authorizer
          cors: true

  set_stop:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/setstop.setstop
    events:
      - http:
          path: merchants/iq/stop
          method: post
          authorizer: authorizer
          cors: true

  set_openvalue:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/setopenvalue.setopenvalue
    events:
      - http:
          path: merchants/iq/openvalue
          method: post
          authorizer: authorizer
          cors: true

  set_martingale:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/setmartingale.setmartingale
    events:
      - http:
          path: merchants/iq/martingale
          method: post
          authorizer: authorizer
          cors: true                   
  set_soro:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/setsoro.setsoro
    events:
      - http:
          path: merchants/iq/soros
          method: post
          authorizer: authorizer
          cors: true

  set_bot_active:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/activatebot.activatebot
    events:
      - http:
          path: merchants/iq/active
          method: post
          authorizer: authorizer
          cors: true  

  set_follow_trader:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/setfollowtrader.setfollowtrader
    events:
      - http:
          path: merchants/iq/followtrader
          method: post
          authorizer: authorizer
          cors: false  

  announce_payment:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/announce.announce
    events:
      - http:
          path: merchants/announce_payment
          method: post
          cors: false

  list_actives_realtime:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/realtime.list
    events:
      - http:
          path: merchants/realtime
          method: get
          cors: false

  login_merchant:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/login.login
    events:
      - http:
          path: merchants/login
          method: post
          cors: true

  authorizer:
    handler: merchants/authorizer.authorizer

  update_merchant:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/update.update
    events:
      - http:
          path: merchants/{id}
          method: put
          cors: true

  delete_merchant:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/delete.delete
    events:
      - http:
          path: merchants/{id}
          method: delete
          cors: true

  list_merchants:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/list.list
    events:
      - http:
          path: merchants
          method: get
          cors: true
  
  list_active:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/actives.actives
    events:
      - http:
          path: merchants/actives
          method: get
          cors: true         
          
  send:
    role: ${ssm:${self:custom.stage}-merchants-role}
    handler: merchants/send.send
    memorySize: 1024
    timeout: 10
    events:
      - http:
          path: merchants/new/password
          method: post
          cors: true   

layers:
  movieshop-shared:
    path: ../movieshop-layers-modules/movieshop-shared
    name: movieshop-shared
    description: "shared functions"
    compatibleRuntimes:
          - nodejs16.x   

